/* generated by Buddy */
if (window._m_ == null) window._m_ = {};
if (window.require == null) {
  window.require = function require (id) {
    if (!_m_[id]) return;
    return (_m_[id].boot) ? _m_[id]() : _m_[id];
  };
}
var global = window.global = window;

(function (global) {
  var babelHelpers = global.babelHelpers = {};

  babelHelpers.classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  babelHelpers.createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  babelHelpers.defineProperty = function (obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  };

  babelHelpers.get = function get(object, property, receiver) {
    if (object === null) object = Function.prototype;
    var desc = Object.getOwnPropertyDescriptor(object, property);

    if (desc === undefined) {
      var parent = Object.getPrototypeOf(object);

      if (parent === null) {
        return undefined;
      } else {
        return get(parent, property, receiver);
      }
    } else if ("value" in desc) {
      return desc.value;
    } else {
      var getter = desc.get;

      if (getter === undefined) {
        return undefined;
      }

      return getter.call(receiver);
    }
  };

  babelHelpers.inherits = function (subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  };

  babelHelpers.possibleConstructorReturn = function (self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  };

  babelHelpers.taggedTemplateLiteral = function (strings, raw) {
    return Object.freeze(Object.defineProperties(strings, {
      raw: {
        value: Object.freeze(raw)
      }
    }));
  };
})(typeof global === "undefined" ? self : global);
_m_['src/index.js']=(function(module,exports){
  module=this;exports=module.exports;

  'use strict';
  
  /**
   * Convert a series of points to a CatmullRom spline
   * https://github.com/yr/catmull-rom-spline
   * @copyright Yr
   * @license MIT
   */
  
  module.exports = {
    /**
     * Convert 'points' to catmull rom bezier spline
     * @param {Array} points
     * @returns {Array}
     */
    points: function points(_points) {
      var isClosedCurve = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
  
      var n = _points.length;
  
      // Abort if there are not sufficient points to draw a curve
      if (n < 3) return _points;
  
      var p0 = isClosedCurve ? _points[n - 1] : _points[0];
      var p1 = _points[0];
      var p2 = _points[1];
      var p3 = _points[2];
      var pts = [_points[0]];
  
      for (var i = 1; i < n; i++) {
        pts.push([(-p0[0] + 6 * p1[0] + p2[0]) / 6, (-p0[1] + 6 * p1[1] + p2[1]) / 6, (p1[0] + 6 * p2[0] - p3[0]) / 6, (p1[1] + 6 * p2[1] - p3[1]) / 6, p2[0], p2[1]]);
  
        p0 = p1;
        p1 = p2;
        p2 = p3;
        p3 = _points[i + 2] || (isClosedCurve ? _points[i + 2 - n] : p3);
      }
  
      return pts;
    },
  
  
    /**
     * Slice out a segment of 'points'
     * @param {Array} points
     * @param {Number} start
     * @param {Number} end
     * @returns {Array}
     */
    slice: function slice(points, start, end) {
      var pts = points.slice(start, end);
  
      // Remove control points for 'M'
      if (start) pts[0] = pts[0].slice(-2);
  
      return pts;
    },
  
  
    /**
     * Convert 'points' to svg path
     * @param {Array} points
     * @returns {String}
     */
    svgPath: function svgPath(points) {
      var digits = arguments.length <= 1 || arguments[1] === undefined ? 12 : arguments[1];
  
      var p = '';
  
      for (var i = 0; i < points.length; i++) {
        var point = points[i];
        var n = point.length;
  
        if (!i) {
          p += 'M' + point[n - 2].toFixed(digits) + ' ' + point[n - 1].toFixed(digits);
        } else if (n > 4) {
          p += 'C' + point[0].toFixed(digits) + ', ' + point[1].toFixed(digits);
          p += ', ' + point[2].toFixed(digits) + ', ' + point[3].toFixed(digits);
          p += ', ' + point[4].toFixed(digits) + ', ' + point[5].toFixed(digits);
        } else {
          p += 'S' + point[0].toFixed(digits) + ', ' + point[1].toFixed(digits);
          p += ', ' + point[2].toFixed(digits) + ', ' + point[3].toFixed(digits);
        }
      }
  
      return p;
    }
  };

  return module.exports;
}).call({exports:{}});